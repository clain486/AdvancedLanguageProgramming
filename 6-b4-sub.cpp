/* 2151140 信07 王谦 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */   
    const char* p = str;
    int k;
    if (p == NULL) {
        return 0;
    }
    else {
        for (k = 0; *p != 0; p++) {
            k++;
        }
        return k;
    }   
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strcat(char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int k, m = tj_strlen(s1), n = tj_strlen(s2);
    char* p1 = s1 + m;
    const char* p2 = s2;
    if (p1 == NULL) {
        return NULL;
    }
    else {
        for (k = 0; k < n; p1++, p2++, k++) {
            *p1 = *p2;
        }
        *p1 = 0;
        return s1;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strncat(char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */  
    
    int k, m = tj_strlen(s1), n = tj_strlen(s2);
    char* p1 = s1 + m;
    const char* p2 = s2;
    if (p1 == NULL) {
        return NULL;
    }
    else {
        for (k = 0; k < n&&k<len; p1++, p2++, k++) {
            *p1 = *p2;
        }
        *p1 = 0;
        return s1;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strcpy(char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p1 = s1;
    const char* p2 = s2;
    int k, m = tj_strlen(s1), n = tj_strlen(s2);
    if (p1 == NULL) {
        return NULL;
    }  
    else {
        for (k=0; k<n; p1++, p2++, k++) {
            *p1 = *p2;
        }
        *p1 = 0;
        return s1;
    }   
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strncpy(char* s1, const char* s2, const int len)
{
    char* p1 = s1;
    const char* p2 = s2;
    int k, m = tj_strlen(s1), n = tj_strlen(s2);
    if (p1 == NULL) {
        return NULL;
    }
    else {
        for (k = 0; k < n&&k < len; p1++, p2++, k++) {
            *p1 = *p2;
        }
        return s1;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p1 = s1;
    const char* p2 = s2;
    int t;
    if (p1 == 0 && p2 == 0) {
        return 0;
    }
    else if (p2 == 0) {
        return 1;
    }
    else if (p1 == 0) {
        return -1;
    }
    else {
        for (; 1; p1++, p2++) {
            t = *p1 - *p2;
            if (t != 0 || *p2 == 0) {
                break;
            }
        }
        return t;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p1 = s1;
    const char* p2 = s2;
    int t, x, y;
    if (p1 == 0 && p2 == 0) {
        return 0;
    }
    else if (p2 == 0) {
        return 1;
    }
    else if (p1 == 0) {
        return -1;
    }
    else {
        for (; 1; p1++, p2++) {
            x = *p1;
            y = *p2;
            if (*p1 >= 65 && *p1 <= 90) {
                x = *p1 + 32;
            }
            if (*p2 >= 65 && *p2 <= 90) {
                y = *p2 + 32;
            }
            t = x - y;
            if (x != y || y == 0) {
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p1 = s1;
    const char* p2 = s2;
    int k, t;
    if (p1 == 0 && p2 == 0) {
        return 0;
    }
    else if (p2 == 0) {
        return 1;
    }
    else if (p1 == 0) {
        return -1;
    }
    else {
        for (k = 0; 1; p1++, p2++, k++) {
            t = *p1 - *p2;
            if (*p1 != *p2 || *p2 == 0 || k == len - 1) {
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p1 = s1;
    const char* p2 = s2;
    int k, t, x, y;
    if (p1 == 0 && p2 == 0) {
        return 0;
    }
    else if (p2 == 0) {
        return 1;
    }
    else if (p1 == 0) {
        return -1;
    }
    else {
        for (k = 0; 1; p1++, p2++, k++) {
            x = *p1;
            y = *p2;
            if (*p1 >= 65 && *p1 <= 90) {
                x = *p1 + 32;
            }
            if (*p2 >= 65 && *p2 <= 90) {
                y = *p2 + 32;
            }
            t = x - y;
            if (x != y || y == 0 || k == len - 1) {
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strupr(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p = str;
    if (p == 0) {
        return NULL;
    }
    else {
        for (; 1; p++) {
            if (*p >= 97 && *p <= 122) {
                *p -= 32;
            }
            else if (*p == 0) {
                break;
            }
        }
        return str;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strlwr(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p = str;
    if (p == 0) {
        return NULL;
    }
    else {
        for (; 1; p++) {
            if (*p >= 65 && *p <= 90) {
                *p += 32;
            }
            else if (*p == 0) {
                break;
            }
        }
        return str;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char* str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p = str;
    int k, t, n = tj_strlen(str);
    if (str == NULL) {
        return 0;
    }
    else {
        for (k = 0; 1; p++, k++) {
            t = k + 1;
            if (*p == ch) {
                break;
            }
            else if (k == n && *p != ch) {
                t = 0;
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char* str, const char* substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p1 = str;
    const char* p2 = substr;
    int k, j, num = 0, t, m = tj_strlen(str), n = tj_strlen(substr);
    if (p2 == 0) {
        return 0;
    }
    else if (m < n) {
        t = 0;
        return t;
    }
    else {
        for (k = 0; 1; k++)
        {
            for (p1 = str+k, p2=substr, j = 0; j < n; p1++, p2++, j++) {               
                if (*p1 == *p2) {
                    num += 1;
                }
            }
            if (num == n) {
                t = k + 1;
                break;
            }
            else if (k < m - n) {
                num = 0;
                t = 0;
            }
            else if (k == m - n) {
                t = 0;
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char* str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p = str;
    int k, t, n = tj_strlen(str);
    if (str == NULL) {
        return 0;
    }
    else {
        for (k = n - 1,p = str + n - 1; 1; p--, k--) {
            t = k + 1;
            if (*p == ch) {
                break;
            }
            else if (k == 0 && *(p + k) != ch) {
                t = 0;
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char* str, const char* substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    const char* p1 = str;
    const char* p2 = substr;
    int k, j, num = 0, t, m = tj_strlen(str), n = tj_strlen(substr);
    if (p2 == 0) {
        return 0;
    }
    else if (m < n) {
        t = 0;
        return t;
    }
    else {
        for (k = m - n; 1; k--)
        {
            for (p1=str+k,p2=substr, j = 0; j < n; p1++, p2++, j++) {
                if (*p1 == *p2) {
                    num += 1;
                }
            }
            if (num == n) {
                t = k + 1;
                break;
            }
            else if (k > 0) {
                num = 0;
                t = 0;
            }
            else if (k == 0) {
                t = 0;
                break;
            }
        }
        return t; //return值可根据需要修改
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strrev(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* p = str;
    int n = tj_strlen(str);
    char t;
    for (p=str; p-str < (n / 2); p++) {
        t = *p;
        *p = *((str + n) - (p - str) - 1);
        *((str + n) - (p - str) - 1) = t;
    }
    return str;
}